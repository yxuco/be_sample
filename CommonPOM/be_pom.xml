<?xml version="1.0" encoding="UTF-8"?>
<!--
  Base configuration for BusinessEvents
  Creation datetime: Thu Nov 09 21:21:51 MDT 2017
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!-- gets common definitions from ./pom.xml -->
  <parent>
    <groupId>com.tibco.psg</groupId>
    <artifactId>CommonPOM</artifactId>
    <version>1.0.0</version>
    <relativePath>pom.xml</relativePath>
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.tibco.psg.be</groupId>
  <artifactId>BECommon</artifactId>
  <packaging>pom</packaging>

  <properties>
    <!-- build user must set env: export BE_HOME=/usr/local/tibco_be/be/5.4, for example. -->
    <tibco.be.home>${env.BE_HOME}</tibco.be.home>
    <tibco.be.studio.tools>${tibco.be.home}/studio/bin/studio-tools</tibco.be.studio.tools>

    <!-- by default, project name is the same as artifactId, child project can override it if necessary. -->
    <be.project.root>${project.artifactId}</be.project.root>
    <!-- additional jars for buildear; child project may override it if require more jars -->
    <be.studiotools.class.path>.</be.studiotools.class.path>
    <!-- by default install final BE ear file to a parent distribute filder, child project may override it -->
    <be.distribute.path>${project.basedir}/../distribute</be.distribute.path>
  </properties>

  <build>
    <!-- define generic plugin tasks, so child project can pick from these tasks -->
    <pluginManagement>
      <plugins>
        <!-- use this plugin to manipulate variables specific to individual developers;
             map environment variables in template files, and then copy the result to target location.
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
          <executions>
            <!-- generate BE project studio files from template;
                 the resulting .beproject and .classpath are put in the BE project root, and so,
                 the BE project can import into studio that matches individual developer's environment.
            -->
            <execution>
              <id>be-project-gen</id>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <phase>validate</phase>
              <configuration>
                <resources>
                  <resource>
                    <directory>src/main/${be.project.root}/template</directory>
                    <filtering>true</filtering>
                  </resource>
                </resources>
                <outputDirectory>src/main/${be.project.root}</outputDirectory>
              </configuration>
            </execution>
            <!-- generate ant build.xml for test-compile from template;
                 the result build.xml is used to compile test code, and
                 it can also be used to create studio project for developing unit tests.
             -->
            <execution>
              <id>be-test-gen</id>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <phase>validate</phase>
              <configuration>
                <resources>
                  <resource>
                    <directory>src/test/template</directory>
                    <includes>
                      <include>build.xml</include>
                    </includes>
                    <filtering>true</filtering>
                  </resource>
                </resources>
                <outputDirectory>${project.basedir}</outputDirectory>
              </configuration>
            </execution>
            <!-- generate config.properties for running unit tests that requires BE engine started in API mode;
                 the template variables in this file are replaced with values matching the developer's environment.
            -->
            <execution>
              <id>be-test-config</id>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <phase>validate</phase>
              <configuration>
                <resources>
                  <resource>
                    <directory>src/test/template</directory>
                    <includes>
                      <include>config.properties</include>
                    </includes>
                    <filtering>true</filtering>
                  </resource>
                </resources>
                <outputDirectory>${project.build.directory}</outputDirectory>
              </configuration>
            </execution>
            <!-- install final BE ear file to package distribution folder -->
            <execution>
              <id>be-distribute-ear</id>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <phase>install</phase>
              <configuration>
                <resources>
                  <resource>
                    <directory>${project.build.directory}</directory>
                    <includes>
                      <include>${project.build.finalName}.ear</include>
                    </includes>
                    <filtering>false</filtering>
                  </resource>
                </resources>
                <outputDirectory>${be.distribute.path}</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- execute BE build commands for creating ear or projlib -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>1.5.0</version>
          <executions>
            <!-- build ear for BE project that does not use any projlib;
                 child project pom should set the property be.studiotools.class.path to additional jars;
                 do not leave it blank, at least set it to "." if no additional jars are required.
            -->
            <execution>
              <id>be-build-ear</id>
              <goals>
                <goal>exec</goal>
              </goals>
              <phase>none</phase>
              <configuration>
                <executable>${tibco.be.studio.tools}</executable>
                <workingDirectory>${project.build.directory}</workingDirectory>
                <arguments>
                  <argument>--propFile</argument>
                  <argument>${tibco.be.studio.tools}.tra</argument>
                  <argument>-x</argument>
                  <argument>-core</argument>
                  <argument>buildear</argument>
                  <argument>-o</argument>
                  <argument>${project.build.directory}/${project.build.finalName}.ear</argument>
                  <argument>-p</argument>
                  <argument>${project.basedir}/src/main/${be.project.root}</argument>
                  <argument>-cp</argument>
                  <argument>${be.studiotools.class.path}</argument>
                </arguments>
              </configuration>
            </execution>

            <!-- build ear for BE project that uses at least a projlib;
                 child project pom should set the property be.studiotools.class.path to additional jars,
                 and the property be.studiotools.projlib.path
            -->
            <execution>
              <id>be-build-ear-with-projlib</id>
              <goals>
                <goal>exec</goal>
              </goals>
              <phase>none</phase>
              <configuration>
                <executable>${tibco.be.studio.tools}</executable>
                <workingDirectory>${project.build.directory}</workingDirectory>
                <arguments>
                  <argument>--propFile</argument>
                  <argument>${tibco.be.studio.tools}.tra</argument>
                  <argument>-x</argument>
                  <argument>-core</argument>
                  <argument>buildear</argument>
                  <argument>-o</argument>
                  <argument>${project.build.directory}/${project.build.finalName}.ear</argument>
                  <argument>-p</argument>
                  <argument>${project.basedir}/src/main/${be.project.root}</argument>
                  <argument>-pl</argument>
                  <argument>${be.studiotools.projlib.path}</argument>
                  <argument>-cp</argument>
                  <argument>${be.studiotools.class.path}</argument>
                </arguments>
              </configuration>
            </execution>

            <!-- build projlib from a BE project:
                 child project pom should specify be.project.resources that go into the projlib.
            -->
            <execution>
              <id>be-build-projlib</id>
              <goals>
                <goal>exec</goal>
              </goals>
              <phase>none</phase>
              <configuration>
                <executable>${tibco.be.studio.tools}</executable>
                <workingDirectory>${project.build.directory}</workingDirectory>
                <arguments>
                  <argument>--propFile</argument>
                  <argument>${tibco.be.studio.tools}.tra</argument>
                  <argument>-x</argument>
                  <argument>-core</argument>
                  <argument>buildLibrary</argument>
                  <argument>-n</argument>
                  <argument>${project.build.directory}/${project.build.finalName}.projlib</argument>
                  <argument>-p</argument>
                  <argument>${project.basedir}/src/main/${be.project.root}</argument>
                  <argument>-f</argument>
                  <argument>${be.project.resources}</argument>
                </arguments>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- disable default-compile and default-test-compile, instead, use buildear for BE compile and antrun for jUnit compile -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
          <executions>
            <execution>
              <id>default-compile</id>
              <phase>none</phase>
            </execution>
            <execution>
              <id>default-testCompile</id>
              <phase>none</phase>
            </execution>
          </executions>
        </plugin>
        <!-- compile test code using antrun plugin:
             it requires all BE jars to compile the test code that launches BE engine in API mode;
             cannot use compiler plugin because too many BE jars are required to compile the code;
             note that env JAVA_HOME must be set to a full JDK containing tools.jar in the lib folder.
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>1.8</version>
          <dependencies>
            <dependency>  <!-- work-around a problem of the plugin that uses wrong JAVA_HOME environment -->
              <groupId>com.sun</groupId>
              <artifactId>tools</artifactId>
              <version>1.8.0</version>
              <scope>system</scope>
              <systemPath>${java.home}/../lib/tools.jar</systemPath>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <id>be-test-compile</id>
              <goals>
                <goal>run</goal>
              </goals>
              <phase>test-compile</phase>
              <configuration>
                <target>
                  <ant antfile="build.xml" target="compile" />
                </target>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- execute jUnit tests using surefire plugin: 
             assuming that AllTestSuite.java wraps all unit test suites; 
             include all jars required to run BE engine in API mode.
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.20.1</version>
          <executions>
            <!-- disable default test, and replace it with run-be-test -->
            <execution>
              <id>default-test</id>
              <phase>none></phase>
            </execution>
            <execution>
              <id>run-be-test</id>
              <goals>
                <goal>test</goal>
              </goals>
              <phase>test</phase>
              <configuration>
                <additionalClasspathElements>
                  <additionalClasspathElement>${tibco.be.home}/lib/*</additionalClasspathElement>
                  <additionalClasspathElement>${tibco.be.home}/lib/ext/tpcl/*</additionalClasspathElement>
                  <additionalClasspathElement>${tibco.be.home}/lib/ext/tpcl/apache/*</additionalClasspathElement>
                  <additionalClasspathElement>${tibco.be.home}/lib/ext/tpcl/emf/*</additionalClasspathElement>
                  <additionalClasspathElement>${tibco.be.home}/lib/ext/tibco/*</additionalClasspathElement>
                </additionalClasspathElements>
                <useSystemClassLoader>false</useSystemClassLoader>
                <useManifestOnlyJar>false</useManifestOnlyJar>
                <includes>
                  <include>**/*AllTestSuite.java</include>
                </includes>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- disable default-jar, no jars are generated -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
          <executions>
            <execution>
              <id>default-jar</id>
              <phase>none></phase>
            </execution>
          </executions>
        </plugin>

        <!-- disable default-install, instead, use copy-resources to copy ear to distribution folder -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
          <executions>
            <execution>
              <id>default-install</id>
              <phase>none></phase>
            </execution>
          </executions>
        </plugin>
        
        <!-- config default-clean to cleanup additional files created by BE buildear -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
          <configuration>
            <filesets>
              <fileset>
                <directory>${project.basedir}/logs</directory>
              </fileset>
            </filesets>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
