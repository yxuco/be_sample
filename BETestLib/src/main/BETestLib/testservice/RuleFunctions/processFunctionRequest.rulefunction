/**
 * @description Invoke a specified test in preprocessor context, and return the result in the payload of a TestResponse.
 * @author Yueming Xu
 */
void rulefunction testservice.RuleFunctions.processFunctionRequest {
	attribute {
		validity = ACTION;
	}
	scope {
		testservice.Events.TestRequest req;
	}
	body {
		Object logger = Log.getLogger("testservice.RuleFunctions.processFunctionRequest");
		Log.log(logger, "info", "Received test for function: %s in preprocessor context: %s", req.name, req.preproc);
		if (true == req.preproc) {
			TestResponse resp;
			try {
				Log.log(logger, "info", "Invoke test %s in preprocessor context", req.name);
				String result = testservice.RuleFunctions.invokeTest(req.name);
				resp = testservice.Events.TestResponse.TestResponse(
					null /*extId String */,
					result /*payload String */);
			}
			catch (Exception e) {
				String msg = String.format("Exception: %s; StackTrace: %s", e@message, e@stackTrace);
				resp = testservice.Events.TestResponse.TestResponse(
					null /*extId String */,
					msg /*payload String */);
			}
			finally {
				Log.log(logger, "info", "%s returned %s", req.name, resp@payload);
				Event.replyEvent(req, resp);
				Event.consumeEvent(req);
			}
		}
	}
}