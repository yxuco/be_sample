/**
 * @description 
 * @author
 */
rule TestDriver.invokeTest {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		TestDriver.TestTimer timer;
	}
	when {
		
	}
	then {
		long startTime = System.nanoTime();
		Object logger = Log.getLogger("TestDriver.invokeTest");
		int index = Number.intValue(timer@closure, 10) % StateCapitals.cityState@length;
		String cityState = StateCapitals.cityState[index];
		
		String url = String.format("http://%s:%s/Channels/HTTP/getWeather",
			System.getGlobalVariableAsString("GREETING_HOST", "localhost"),
			System.getGlobalVariableAsString("GREETING_PORT", "9090"));
		Object conn = HTTP.ConnectionInfo.createHTTPConnectionInfo(false);
		try {
			Events.HTTPResponse resp = HTTP.sendRequest(url, Events.HTTPRequest.HTTPRequest(null, null, cityState), "/Events/HTTPResponse", 10000, conn);
			Log.log(logger, "info", "Response status: %d, content: %s", resp.HttpStatusCode, resp@payload);
			if (resp.HttpStatusCode < 300) {
				Stats.writeStat(Constants.Completed, System.nanoTime() - startTime, null);
			} else {
				Stats.writeStat(Constants.Failed, System.nanoTime() - startTime, null);
			}
		} catch (Exception e) {
			Log.logException(logger, "error", "Caught exception for city %s.", e, cityState);
			Stats.writeStat(Constants.Failed, System.nanoTime() - startTime, null);
		}
		
		// schedule next test
		long delay = System.getGlobalVariableAsLong("TEST_INTERVAL", 2000);
		TestDriver.TestTimer.scheduleTestTimer(delay /*delay long */, String.valueOfInt(index + 1) /*closure String */, 0/*ttl long */);
	}
}